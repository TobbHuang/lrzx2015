package com.example.hometeacher.activity;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.baidu.location.LocationClientOption.LocationMode;
import com.baidu.location.Poi;
import com.baidu.mapapi.SDKInitializer;
import com.baidu.mapapi.search.core.PoiInfo;
import com.baidu.mapapi.search.poi.OnGetPoiSearchResultListener;
import com.baidu.mapapi.search.poi.PoiCitySearchOption;
import com.baidu.mapapi.search.poi.PoiDetailResult;
import com.baidu.mapapi.search.poi.PoiResult;
import com.baidu.mapapi.search.poi.PoiSearch;
import com.example.hometeacher.R;
import com.example.hometeacher.R.layout;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.BaseAdapter;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

public class LocationActivity extends Activity {

	ProgressDialog pd;
	boolean isFirstLocation = true;

	public LocationClient mLocationClient = null;
	public BDLocationListener myListener = new MyLocationListener();

	ArrayList<String> list;
	MyAdapter adapter;

	PoiSearch mPoiSearch;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		// 在使用SDK各组件之前初始化context信息，传入ApplicationContext
		// 注意该方法要再setContentView方法之前实现
		SDKInitializer.initialize(getApplicationContext());
		setContentView(R.layout.activity_location);

		pd = new ProgressDialog(this);
		pd.setMessage("正在定位，请稍后");
		pd.setCancelable(true);

		initLocation();
		initView();

		mLocationClient.start();

		System.out.println(mPoiSearch.searchInCity((new PoiCitySearchOption())
				.city("成都").keyword("火锅").pageNum(10)));
	}

	OnClickListener onClickListener = new OnClickListener() {

		@Override
		public void onClick(View v) {
			// TODO Auto-generated method stub
			switch (v.getId()) {
			case R.id.rl_location_location:
				pd.show();
				mLocationClient.start();
				break;
			}
		}
	};

	private void initView() {
		RelativeLayout rl_location = (RelativeLayout) findViewById(R.id.rl_location_location);
		rl_location.setOnClickListener(onClickListener);
	}

	private void initLocation() {
		// TODO Auto-generated method stub
		mLocationClient = new LocationClient(getApplicationContext()); // 声明LocationClient类
		mLocationClient.registerLocationListener(myListener); // 注册监听函数

		LocationClientOption option = new LocationClientOption();
		option.setLocationMode(LocationMode.Hight_Accuracy);// 可选，默认高精度，设置定位模式，高精度，低功耗，仅设备
		option.setCoorType("bd09ll");// 可选，默认gcj02，设置返回的定位结果坐标系
		int span = 0;
		option.setScanSpan(span);// 可选，默认0，即仅定位一次，设置发起定位请求的间隔需要大于等于1000ms才是有效的
		option.setIsNeedAddress(true);// 可选，设置是否需要地址信息，默认不需要
		option.setOpenGps(true);// 可选，默认false,设置是否使用gps
		// option.setLocationNotify(true);//
		// 可选，默认false，设置是否当gps有效时按照1S1次频率输出GPS结果
		option.setIsNeedLocationDescribe(true);// 可选，默认false，设置是否需要位置语义化结果，可以在BDLocation.getLocationDescribe里得到，结果类似于“在北京天安门附近”
		option.setIsNeedLocationPoiList(true);// 可选，默认false，设置是否需要POI结果，可以在BDLocation.getPoiList里得到
		option.setIgnoreKillProcess(false);// 可选，默认false，定位SDK内部是一个SERVICE，并放到了独立进程，设置是否在stop的时候杀死这个进程，默认杀死
		option.SetIgnoreCacheException(false);// 可选，默认false，设置是否收集CRASH信息，默认收集
		option.setEnableSimulateGps(false);// 可选，默认false，设置是否需要过滤gps仿真结果，默认需要
		mLocationClient.setLocOption(option);

		list = new ArrayList<String>();
		adapter = new MyAdapter(list);

		ListView lv = (ListView) findViewById(R.id.lv_location);
		lv.setAdapter(adapter);

		mPoiSearch = PoiSearch.newInstance();
		mPoiSearch.setOnGetPoiSearchResultListener(poiListener);

	}

	public class MyLocationListener implements BDLocationListener {

		@Override
		public void onReceiveLocation(BDLocation location) {
			// Receive Location
			pd.dismiss();
			StringBuffer sb = new StringBuffer(256);
			if (location.getLocType() == BDLocation.TypeGpsLocation
					|| location.getLocType() == BDLocation.TypeNetWorkLocation) {// GPS定位结果||网络定位结果
				if (!isFirstLocation) {

					sb.append(location.getCity());
					sb.append(location.getDistrict());
					sb.append(location.getStreet());
					sb.append(location.getStreetNumber());
					sb.append(" " + location.getLocationDescribe());// 位置语义化信息

					Intent intent = new Intent("RefreshMatch");
					intent.putExtra("type", 0);
					intent.putExtra("data", sb.toString());
					sendBroadcast(intent);
					finish();
				}

				isFirstLocation = false;
				list.clear();
				List<Poi> poilist = location.getPoiList();// POI数据
				if (poilist != null) {
					for (Poi p : poilist) {
						list.add(p.getName());
					}

					adapter.notifyDataSetChanged();

				}
				System.out.println(sb.toString());

			} else {// 定位失败
				Toast.makeText(LocationActivity.this, "定位失败",
						Toast.LENGTH_SHORT).show();
			}
		}
	}

	class MyAdapter extends BaseAdapter {

		ArrayList<String> list;

		MyAdapter(ArrayList<String> list) {
			this.list = list;
		}

		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return list.size();
		}

		@Override
		public Object getItem(int arg0) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public long getItemId(int arg0) {
			// TODO Auto-generated method stub
			return 0;
		}

		@Override
		public View getView(int position, View v, ViewGroup arg2) {
			// TODO Auto-generated method stub
			if (v == null) {
				v = LayoutInflater.from(LocationActivity.this).inflate(
						R.layout.item_location, null);
			}

			TextView tv = (TextView) v.findViewById(R.id.tv_itemlocation);
			tv.setText(list.get(position));

			return v;
		}

	}

	OnGetPoiSearchResultListener poiListener = new OnGetPoiSearchResultListener() {
		public void onGetPoiResult(PoiResult result) {
			// 获取POI检索结果
			try {
				System.out.println("onGetPoiResult");
				List<PoiInfo> list = result.getAllPoi();
				if(list==null){
					// 还没弄清楚这里为什么是null，期待下一个开发者来解决
					System.out.println("Poi result is null!!!");
					return;
				}
				for (int i = 0; i < list.size(); i++) {
					System.out.println(list.get(i).name);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		public void onGetPoiDetailResult(PoiDetailResult result) {
			// 获取Place详情页检索结果
		}
	};

	protected void onDestroy() {
		super.onDestroy();

		mPoiSearch.destroy();
	};

}
